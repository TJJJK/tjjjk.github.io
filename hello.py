# -*- coding: utf-8 -*-
# 连续时间实指数信号

import numpy as np 
import matplotlib as mpl
import matplotlib.pyplot as plt
import mpl_toolkits.axisartist as axisartist
fig = plt.figure()
ax = axisartist.Subplot(fig, 111) 
fig.add_axes(ax)
ax.axis[:].set_visible(False)
ax.axis["x"] = ax.new_floating_axis(0,-0.8)
ax.axis["x"].set_axisline_style("->", size = 1.0)
ax.axis["y"] = ax.new_floating_axis(1,0)
ax.axis["y"].set_axisline_style("-|>", size = 1.0)
ax.axis["x"].set_axis_direction("top")
ax.axis["y"].set_axis_direction("right") 
t = np.arange(-5,5,0.1)
s = 0.5
y = np.e**(s*t)
s = -0.5
y_1 = np.e**(s*t)
s = 0
y_2 = np.e**(s*t)
plt.title(r'$x(t)=Ce^{st},s=\sigma+jw_0$')
plt.xticks([])
plt.yticks([])
plt.ylim(-0.8,10)
plt.text(0,-1.2,'0',fontdict={'size':16})
plt.text(5.5,-1.2,'t',fontdict={'size':16})
plt.text(4,7,r'$\sigma>0$',fontdict={'size':16})
plt.text(-5.5,7,r'$\sigma<0$',fontdict={'size':16})
plt.text(0,1.5,'C',fontdict={'size':16})
plt.plot(t,y)
plt.plot(t,y_1)
plt.plot(t,y_2)
plt.show()

# 连续时间正弦信号基波频率与周期的关系（$w_1>w_2>w_3$）
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib 
font = {'family':'SimHei'} 
matplotlib.rc('font',**font) 
matplotlib.rcParams['axes.unicode_minus']=False
fig = plt.figure()
plt.subplot(3,2,1)
ax = plt.gca() 
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none') 
ax.xaxis.set_ticks_position('bottom') 
ax.spines['bottom'].set_position(('data', 0))
ax.yaxis.set_ticks_position('left') 
ax.spines['left'].set_position(('data', 0.6)) 
plt.xticks([2],[r'$T_1$'])
plt.yticks([])
plt.title(r'$x_1(t)=\cos(w_1t)$')
x = np.arange(-3,5,0.1)
y = np.cos(5*x)
plt.plot(x,y,color='black')
plt.subplot(3,2,2)
ax = plt.gca() 
ax.spines['right'].set_color('none') 
ax.spines['top'].set_color('none') 
ax.xaxis.set_ticks_position('bottom') 
ax.spines['bottom'].set_position(('data', 0)) 
ax.yaxis.set_ticks_position('left') 
ax.spines['left'].set_position(('data', 0.6)) 
plt.xticks([2],[r'$T_1$'])
plt.yticks([])
plt.title('$x_1(t)=\cos(w_1t)$''的傅里叶变换')
x = np.arange(-3,5,0.1)
y = np.cos(5*x)
plt.plot(x,np.fft.fft(y),color='black') 
plt.subplot(3,2,3)
ax = plt.gca() 
ax.spines['right'].set_color('none') 
ax.spines['top'].set_color('none')

ax.xaxis.set_ticks_position('bottom') 
ax.spines['bottom'].set_position(('data', 0)) 
ax.yaxis.set_ticks_position('left') 
ax.spines['left'].set_position(('data', 0.6)) 
plt.xticks([2],[r'$T_2$'])
plt.yticks([])
plt.title(r'$x_2(t)=\cos(w_2t)$')
x = np.arange(-3,5,0.1)
y = np.cos(3*x)
plt.plot(x,y,color='black')
plt.subplot(3,2,4)
ax = plt.gca() 
ax.spines['right'].set_color('none') 
ax.spines['top'].set_color('none') 
ax.xaxis.set_ticks_position('bottom') 
ax.spines['bottom'].set_position(('data', 0))
ax.yaxis.set_ticks_position('left') 
ax.spines['left'].set_position(('data', 0.6)) 
plt.xticks([2],[r'$T_2$'])
plt.yticks([])
plt.title('$x_2(t)=\cos(w_2t)$''的傅里叶变换')
x = np.arange(-3,5,0.1)
y = np.cos(3*x)
plt.plot(x,np.fft.fft(y),color='black') 
plt.subplot(3,2,5)
ax = plt.gca() 
ax.spines['right'].set_color('none') 
ax.spines['top'].set_color('none') 
ax.xaxis.set_ticks_position('bottom') 
ax.spines['bottom'].set_position(('data', 0)) 
ax.yaxis.set_ticks_position('left')
ax.spines['left'].set_position(('data', 0.6)) 
plt.xticks([2],[r'$T_3$'])
plt.yticks([])
plt.title(r'$x_3(t)=\cos(w_3t)$')
x = np.arange(-3,5,0.1)
y = np.cos(x)
plt.plot(x,y,color='black')
plt.subplot(3,2,6)
ax = plt.gca() 
ax.spines['right'].set_color('none') 
ax.spines['top'].set_color('none') 
ax.xaxis.set_ticks_position('bottom') 
ax.spines['bottom'].set_position(('data', 0)) 
ax.yaxis.set_ticks_position('left') ax.spines['left'].set_position(('data', 0.6)) plt.xticks([2],[r'$T_3$'])
plt.yticks([])
plt.title('$x_3(t)=\cos(w_3t)$''的傅里叶变换')
x = np.arange(-3,5,0.1)
y = np.cos(x)
plt.plot(x,np.fft.fft(y),color='black') 
plt.show()